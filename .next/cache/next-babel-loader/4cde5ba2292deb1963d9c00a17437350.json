{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar _jsxFileName = \"/Users/trevor_weng/Documents/apps/hello-next/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport fetch from 'isomorphic-unfetch';\nimport ItemRow from '../components/ItemRow';\nimport useSWR from 'swr';\n\nvar Nutrition = function Nutrition(props) {\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6\n    },\n    __self: this\n  }, __jsx(ItemRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, _JSON$stringify(props.data)));\n};\n\nfunction fetcher(url) {\n  return fetch(url).then(function (r) {\n    return r.json();\n  });\n}\n\nNutrition.getInitialProps = function _callee() {\n  var _useSWR, quote, error, res, data;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _useSWR = useSWR('/api/randomQuote', fetcher), quote = _useSWR.quote, error = _useSWR.error;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(fetch('https://trackapi.nutritionix.com/v2/natural/nutrients', {\n            method: 'POST',\n            headers: {\n              \"Content-Type\": \"application/json\",\n              \"x-app-id\": \"3f45926e\",\n              \"x-app-key\": \"8ad16db1af6bf3edf049bd99f5232bdb\"\n            },\n            body: _JSON$stringify({\n              \"query\": \"banana\"\n            })\n          }));\n\n        case 3:\n          res = _context.sent;\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 6:\n          data = _context.sent;\n          return _context.abrupt(\"return\", {\n            data: data\n          });\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default Nutrition;","map":{"version":3,"sources":["/Users/trevor_weng/Documents/apps/hello-next/pages/index.js"],"names":["fetch","ItemRow","useSWR","Nutrition","props","data","fetcher","url","then","r","json","getInitialProps","quote","error","method","headers","body","res"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,MAAP,MAAmB,KAAnB;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAC,KAAK;AAAA,SACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,gBAAeA,KAAK,CAACC,IAArB,CADJ,CAFF,CADqB;AAAA,CAAvB;;AASA,SAASC,OAAT,CAAiBC,GAAjB,EAAsB;AACpB,SAAOP,KAAK,CAACO,GAAD,CAAL,CAAWC,IAAX,CAAgB,UAAAC,CAAC;AAAA,WAAIA,CAAC,CAACC,IAAF,EAAJ;AAAA,GAAjB,CAAP;AACD;;AAEDP,SAAS,CAACQ,eAAV,GAA4B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,oBACDT,MAAM,CAAC,kBAAD,EAAqBI,OAArB,CADL,EAClBM,KADkB,WAClBA,KADkB,EACXC,KADW,WACXA,KADW;AAAA;AAAA,2CAIRb,KAAK,CAAC,uDAAD,EACrB;AACEc,YAAAA,MAAM,EAAE,MADV;AAEEC,YAAAA,OAAO,EAAE;AACP,8BAAgB,kBADT;AAEP,0BAAY,UAFL;AAGP,2BAAa;AAHN,aAFX;AAOEC,YAAAA,IAAI,EAAE,gBAAe;AAAE,uBAAS;AAAX,aAAf;AAPR,WADqB,CAJG;;AAAA;AAIpBC,UAAAA,GAJoB;AAAA;AAAA,2CAePA,GAAG,CAACP,IAAJ,EAfO;;AAAA;AAepBL,UAAAA,IAfoB;AAAA,2CAiBnB;AACLA,YAAAA,IAAI,EAAJA;AADK,WAjBmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA5B;;AAsBA,eAAeF,SAAf","sourcesContent":["import fetch from 'isomorphic-unfetch';\nimport ItemRow from '../components/ItemRow';\nimport useSWR from 'swr';\n\nconst Nutrition = props => (\n  <div>\n    <ItemRow />\n    <div>\n      { JSON.stringify(props.data) }\n    </div>\n  </div>\n);\n\nfunction fetcher(url) {\n  return fetch(url).then(r => r.json());\n}\n\nNutrition.getInitialProps = async function() {\n  const { quote, error } = useSWR('/api/randomQuote', fetcher);\n\n\n  const res = await fetch('https://trackapi.nutritionix.com/v2/natural/nutrients',\n    { \n      method: 'POST',  \n      headers: {\n        \"Content-Type\": \"application/json\", \n        \"x-app-id\": \"3f45926e\", \n        \"x-app-key\" :\"8ad16db1af6bf3edf049bd99f5232bdb\"\n      },\n      body: JSON.stringify({ \"query\": \"banana\" }) ,\n    }\n  );\n  const data = await res.json();\n\n  return {\n    data\n  };\n};\n\nexport default Nutrition;\n"]},"metadata":{},"sourceType":"module"}